
STM32_LCD_Libraries.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000968  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b2c  08000b2c  00010b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b38  08000b38  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08000b38  08000b38  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b38  08000b38  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b38  08000b38  00010b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b3c  08000b3c  00010b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000014  08000b54  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000030  08000b54  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a6e  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000809  00000000  00000000  00022ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000320  00000000  00000000  000232c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002c8  00000000  00000000  000235e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000121a2  00000000  00000000  000238a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000030a6  00000000  00000000  00035a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071212  00000000  00000000  00038af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a9d02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cd8  00000000  00000000  000a9d80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000b14 	.word	0x08000b14

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08000b14 	.word	0x08000b14

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <LCD_ScreenSetup>:
#include <string.h>
#include "LCD.h"


void LCD_ScreenSetup(LCD_PinConfig_t* LCD_Pinconfig)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	/*Send Command 38H to select LCD of two rows */
	GPIO_Write(LCD_Pinconfig->GPIO_Port,(uint16_t)(0x38));
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	2138      	movs	r1, #56	; 0x38
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f9e8 	bl	80005f8 <GPIO_Write>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->readWritePin,Bit_RESET); //Select write
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	6818      	ldr	r0, [r3, #0]
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	7b9b      	ldrb	r3, [r3, #14]
 8000230:	b29b      	uxth	r3, r3
 8000232:	2200      	movs	r2, #0
 8000234:	4619      	mov	r1, r3
 8000236:	f000 f9ba 	bl	80005ae <GPIO_WriteBit>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->regSelectPin,Bit_RESET);  // set Command Register
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	6818      	ldr	r0, [r3, #0]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	7b5b      	ldrb	r3, [r3, #13]
 8000242:	b29b      	uxth	r3, r3
 8000244:	2200      	movs	r2, #0
 8000246:	4619      	mov	r1, r3
 8000248:	f000 f9b1 	bl	80005ae <GPIO_WriteBit>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->enablePin,Bit_SET);   //Set and reset  enable pin to send data
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	6818      	ldr	r0, [r3, #0]
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	7b1b      	ldrb	r3, [r3, #12]
 8000254:	b29b      	uxth	r3, r3
 8000256:	2201      	movs	r2, #1
 8000258:	4619      	mov	r1, r3
 800025a:	f000 f9a8 	bl	80005ae <GPIO_WriteBit>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->enablePin,Bit_RESET);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	6818      	ldr	r0, [r3, #0]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	7b1b      	ldrb	r3, [r3, #12]
 8000266:	b29b      	uxth	r3, r3
 8000268:	2200      	movs	r2, #0
 800026a:	4619      	mov	r1, r3
 800026c:	f000 f99f 	bl	80005ae <GPIO_WriteBit>

	/*Send Command 0EH to Display,Cursor ON */
	GPIO_Write(LCD_Pinconfig->GPIO_Port,(uint16_t)(0x0E));
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	210e      	movs	r1, #14
 8000276:	4618      	mov	r0, r3
 8000278:	f000 f9be 	bl	80005f8 <GPIO_Write>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->readWritePin,Bit_RESET); //Select write
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	6818      	ldr	r0, [r3, #0]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	7b9b      	ldrb	r3, [r3, #14]
 8000284:	b29b      	uxth	r3, r3
 8000286:	2200      	movs	r2, #0
 8000288:	4619      	mov	r1, r3
 800028a:	f000 f990 	bl	80005ae <GPIO_WriteBit>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->regSelectPin,Bit_RESET);  // set Command Register
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	6818      	ldr	r0, [r3, #0]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	7b5b      	ldrb	r3, [r3, #13]
 8000296:	b29b      	uxth	r3, r3
 8000298:	2200      	movs	r2, #0
 800029a:	4619      	mov	r1, r3
 800029c:	f000 f987 	bl	80005ae <GPIO_WriteBit>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->enablePin,Bit_SET);   //Set and reset  enable pin to send data
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	6818      	ldr	r0, [r3, #0]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	7b1b      	ldrb	r3, [r3, #12]
 80002a8:	b29b      	uxth	r3, r3
 80002aa:	2201      	movs	r2, #1
 80002ac:	4619      	mov	r1, r3
 80002ae:	f000 f97e 	bl	80005ae <GPIO_WriteBit>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->enablePin,Bit_RESET);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	6818      	ldr	r0, [r3, #0]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	7b1b      	ldrb	r3, [r3, #12]
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	2200      	movs	r2, #0
 80002be:	4619      	mov	r1, r3
 80002c0:	f000 f975 	bl	80005ae <GPIO_WriteBit>

	/*Send Command 01H to clear display */
		GPIO_Write(LCD_Pinconfig->GPIO_Port,(uint16_t)(0x01));
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2101      	movs	r1, #1
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f994 	bl	80005f8 <GPIO_Write>
		GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->readWritePin,Bit_RESET); //Select write
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	6818      	ldr	r0, [r3, #0]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	7b9b      	ldrb	r3, [r3, #14]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	2200      	movs	r2, #0
 80002dc:	4619      	mov	r1, r3
 80002de:	f000 f966 	bl	80005ae <GPIO_WriteBit>
		GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->regSelectPin,Bit_RESET);  // set Command Register
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	6818      	ldr	r0, [r3, #0]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	7b5b      	ldrb	r3, [r3, #13]
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	2200      	movs	r2, #0
 80002ee:	4619      	mov	r1, r3
 80002f0:	f000 f95d 	bl	80005ae <GPIO_WriteBit>
		GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->enablePin,Bit_SET);   //Set and reset  enable pin to send data
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	6818      	ldr	r0, [r3, #0]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	7b1b      	ldrb	r3, [r3, #12]
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	2201      	movs	r2, #1
 8000300:	4619      	mov	r1, r3
 8000302:	f000 f954 	bl	80005ae <GPIO_WriteBit>
		GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->enablePin,Bit_RESET);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	6818      	ldr	r0, [r3, #0]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	7b1b      	ldrb	r3, [r3, #12]
 800030e:	b29b      	uxth	r3, r3
 8000310:	2200      	movs	r2, #0
 8000312:	4619      	mov	r1, r3
 8000314:	f000 f94b 	bl	80005ae <GPIO_WriteBit>


}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <LCD_WriteData>:



void LCD_WriteData(LCD_PinConfig_t* LCD_Pinconfig,char* dataString)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
	uint8_t stringLen=strlen(dataString);
 800032a:	6838      	ldr	r0, [r7, #0]
 800032c:	f7ff ff6a 	bl	8000204 <strlen>
 8000330:	4603      	mov	r3, r0
 8000332:	72fb      	strb	r3, [r7, #11]
	for(int i=0; i< stringLen; i++)
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	e00b      	b.n	8000352 <LCD_WriteData+0x32>
	{
		LCD_WriteCharacter(LCD_Pinconfig,(char)(*dataString));
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	4619      	mov	r1, r3
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f000 f80e 	bl	8000362 <LCD_WriteCharacter>
		dataString++;
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	3301      	adds	r3, #1
 800034a:	603b      	str	r3, [r7, #0]
	for(int i=0; i< stringLen; i++)
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	3301      	adds	r3, #1
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	7afb      	ldrb	r3, [r7, #11]
 8000354:	68fa      	ldr	r2, [r7, #12]
 8000356:	429a      	cmp	r2, r3
 8000358:	dbef      	blt.n	800033a <LCD_WriteData+0x1a>
	}


}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <LCD_WriteCharacter>:


void LCD_WriteCharacter(LCD_PinConfig_t* LCD_Pinconfig,char dataCharacter)
{
 8000362:	b580      	push	{r7, lr}
 8000364:	b084      	sub	sp, #16
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	460b      	mov	r3, r1
 800036c:	70fb      	strb	r3, [r7, #3]
		uint8_t dataOut;
	dataOut= (uint16_t)dataCharacter;
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	73fb      	strb	r3, [r7, #15]

	/*Send data to LCD*/
	GPIO_Write(LCD_Pinconfig->GPIO_Port,(uint16_t)dataOut);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	7bfa      	ldrb	r2, [r7, #15]
 8000378:	b292      	uxth	r2, r2
 800037a:	4611      	mov	r1, r2
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f93b 	bl	80005f8 <GPIO_Write>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->readWritePin,Bit_RESET); //Select write
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	6818      	ldr	r0, [r3, #0]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	7b9b      	ldrb	r3, [r3, #14]
 800038a:	b29b      	uxth	r3, r3
 800038c:	2200      	movs	r2, #0
 800038e:	4619      	mov	r1, r3
 8000390:	f000 f90d 	bl	80005ae <GPIO_WriteBit>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->regSelectPin,Bit_SET);  // set Data Register
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	6818      	ldr	r0, [r3, #0]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	7b5b      	ldrb	r3, [r3, #13]
 800039c:	b29b      	uxth	r3, r3
 800039e:	2201      	movs	r2, #1
 80003a0:	4619      	mov	r1, r3
 80003a2:	f000 f904 	bl	80005ae <GPIO_WriteBit>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->enablePin,Bit_SET);   //Set and reset  enable pin to send data
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	6818      	ldr	r0, [r3, #0]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	7b1b      	ldrb	r3, [r3, #12]
 80003ae:	b29b      	uxth	r3, r3
 80003b0:	2201      	movs	r2, #1
 80003b2:	4619      	mov	r1, r3
 80003b4:	f000 f8fb 	bl	80005ae <GPIO_WriteBit>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->enablePin,Bit_RESET);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6818      	ldr	r0, [r3, #0]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	7b1b      	ldrb	r3, [r3, #12]
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	2200      	movs	r2, #0
 80003c4:	4619      	mov	r1, r3
 80003c6:	f000 f8f2 	bl	80005ae <GPIO_WriteBit>
}
 80003ca:	bf00      	nop
 80003cc:	3710      	adds	r7, #16
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <LCD_PinSetup>:


/*LCD PinSetup */

void LCD_PinSetup(LCD_PinConfig_t* LCD_PinConfig)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b086      	sub	sp, #24
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]

/* Setup Data Pins */
		GPIO_InitTypeDef LCD_GPIO;

		memset(&LCD_GPIO,0,sizeof(LCD_GPIO));
 80003da:	f107 0310 	add.w	r3, r7, #16
 80003de:	2208      	movs	r2, #8
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 fb8e 	bl	8000b04 <memset>
		LCD_GPIO.GPIO_Mode=GPIO_Mode_OUT;
 80003e8:	2301      	movs	r3, #1
 80003ea:	753b      	strb	r3, [r7, #20]
		LCD_GPIO.GPIO_OType=GPIO_OType_PP;
 80003ec:	2300      	movs	r3, #0
 80003ee:	75bb      	strb	r3, [r7, #22]
		LCD_GPIO.GPIO_Pin=LCD_PinConfig->dataPin[0] |LCD_PinConfig->dataPin[1]|LCD_PinConfig->dataPin[2]|LCD_PinConfig->dataPin[3]|LCD_PinConfig->dataPin[4]|LCD_PinConfig->dataPin[5]|LCD_PinConfig->dataPin[6]|LCD_PinConfig->dataPin[7] ;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	791a      	ldrb	r2, [r3, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	795b      	ldrb	r3, [r3, #5]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	799b      	ldrb	r3, [r3, #6]
 8000400:	4313      	orrs	r3, r2
 8000402:	b2da      	uxtb	r2, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	79db      	ldrb	r3, [r3, #7]
 8000408:	4313      	orrs	r3, r2
 800040a:	b2da      	uxtb	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	7a1b      	ldrb	r3, [r3, #8]
 8000410:	4313      	orrs	r3, r2
 8000412:	b2da      	uxtb	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	7a5b      	ldrb	r3, [r3, #9]
 8000418:	4313      	orrs	r3, r2
 800041a:	b2da      	uxtb	r2, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	7a9b      	ldrb	r3, [r3, #10]
 8000420:	4313      	orrs	r3, r2
 8000422:	b2da      	uxtb	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	7adb      	ldrb	r3, [r3, #11]
 8000428:	4313      	orrs	r3, r2
 800042a:	b2db      	uxtb	r3, r3
 800042c:	613b      	str	r3, [r7, #16]
		LCD_GPIO.GPIO_PuPd=GPIO_PuPd_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	75fb      	strb	r3, [r7, #23]
		LCD_GPIO.GPIO_Speed=GPIO_Low_Speed;
 8000432:	2300      	movs	r3, #0
 8000434:	757b      	strb	r3, [r7, #21]

		GPIO_Init(LCD_PinConfig->GPIO_Port,&LCD_GPIO);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f107 0210 	add.w	r2, r7, #16
 800043e:	4611      	mov	r1, r2
 8000440:	4618      	mov	r0, r3
 8000442:	f000 f826 	bl	8000492 <GPIO_Init>

/* Setup control Pins */

		GPIO_InitTypeDef LCD_GPIO2;

		memset(&LCD_GPIO2,0,sizeof(LCD_GPIO2));
 8000446:	f107 0308 	add.w	r3, r7, #8
 800044a:	2208      	movs	r2, #8
 800044c:	2100      	movs	r1, #0
 800044e:	4618      	mov	r0, r3
 8000450:	f000 fb58 	bl	8000b04 <memset>
		LCD_GPIO2.GPIO_Mode=GPIO_Mode_OUT;
 8000454:	2301      	movs	r3, #1
 8000456:	733b      	strb	r3, [r7, #12]
		LCD_GPIO2.GPIO_OType=GPIO_OType_PP;
 8000458:	2300      	movs	r3, #0
 800045a:	73bb      	strb	r3, [r7, #14]
		LCD_GPIO2.GPIO_Pin=LCD_PinConfig->enablePin|LCD_PinConfig->readWritePin|LCD_PinConfig->regSelectPin;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	7b1a      	ldrb	r2, [r3, #12]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	7b9b      	ldrb	r3, [r3, #14]
 8000464:	4313      	orrs	r3, r2
 8000466:	b2da      	uxtb	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	7b5b      	ldrb	r3, [r3, #13]
 800046c:	4313      	orrs	r3, r2
 800046e:	b2db      	uxtb	r3, r3
 8000470:	60bb      	str	r3, [r7, #8]
		LCD_GPIO2.GPIO_PuPd=GPIO_PuPd_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	73fb      	strb	r3, [r7, #15]
		LCD_GPIO2.GPIO_Speed=GPIO_Low_Speed;
 8000476:	2300      	movs	r3, #0
 8000478:	737b      	strb	r3, [r7, #13]

		GPIO_Init(LCD_PinConfig->GPIO_Port,&LCD_GPIO2);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f107 0208 	add.w	r2, r7, #8
 8000482:	4611      	mov	r1, r2
 8000484:	4618      	mov	r0, r3
 8000486:	f000 f804 	bl	8000492 <GPIO_Init>

}
 800048a:	bf00      	nop
 800048c:	3718      	adds	r7, #24
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}

08000492 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000492:	b480      	push	{r7}
 8000494:	b087      	sub	sp, #28
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
 800049a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
 80004a0:	2300      	movs	r3, #0
 80004a2:	613b      	str	r3, [r7, #16]
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
 80004ac:	e076      	b.n	800059c <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004ae:	2201      	movs	r2, #1
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	fa02 f303 	lsl.w	r3, r2, r3
 80004b6:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	693a      	ldr	r2, [r7, #16]
 80004be:	4013      	ands	r3, r2
 80004c0:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	693b      	ldr	r3, [r7, #16]
 80004c6:	429a      	cmp	r2, r3
 80004c8:	d165      	bne.n	8000596 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	2103      	movs	r1, #3
 80004d4:	fa01 f303 	lsl.w	r3, r1, r3
 80004d8:	43db      	mvns	r3, r3
 80004da:	401a      	ands	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	4619      	mov	r1, r3
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	431a      	orrs	r2, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	791b      	ldrb	r3, [r3, #4]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d003      	beq.n	8000508 <GPIO_Init+0x76>
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	791b      	ldrb	r3, [r3, #4]
 8000504:	2b02      	cmp	r3, #2
 8000506:	d12e      	bne.n	8000566 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	689a      	ldr	r2, [r3, #8]
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	2103      	movs	r1, #3
 8000512:	fa01 f303 	lsl.w	r3, r1, r3
 8000516:	43db      	mvns	r3, r3
 8000518:	401a      	ands	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	689a      	ldr	r2, [r3, #8]
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	795b      	ldrb	r3, [r3, #5]
 8000526:	4619      	mov	r1, r3
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	431a      	orrs	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	685a      	ldr	r2, [r3, #4]
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	b29b      	uxth	r3, r3
 800053e:	4619      	mov	r1, r3
 8000540:	2301      	movs	r3, #1
 8000542:	408b      	lsls	r3, r1
 8000544:	43db      	mvns	r3, r3
 8000546:	401a      	ands	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	7992      	ldrb	r2, [r2, #6]
 8000554:	4611      	mov	r1, r2
 8000556:	697a      	ldr	r2, [r7, #20]
 8000558:	b292      	uxth	r2, r2
 800055a:	fa01 f202 	lsl.w	r2, r1, r2
 800055e:	b292      	uxth	r2, r2
 8000560:	431a      	orrs	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	68da      	ldr	r2, [r3, #12]
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	b29b      	uxth	r3, r3
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	2103      	movs	r1, #3
 8000572:	fa01 f303 	lsl.w	r3, r1, r3
 8000576:	43db      	mvns	r3, r3
 8000578:	401a      	ands	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	68da      	ldr	r2, [r3, #12]
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	79db      	ldrb	r3, [r3, #7]
 8000586:	4619      	mov	r1, r3
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	fa01 f303 	lsl.w	r3, r1, r3
 8000590:	431a      	orrs	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	3301      	adds	r3, #1
 800059a:	617b      	str	r3, [r7, #20]
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	2b0f      	cmp	r3, #15
 80005a0:	d985      	bls.n	80004ae <GPIO_Init+0x1c>
    }
  }
}
 80005a2:	bf00      	nop
 80005a4:	371c      	adds	r7, #28
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	460b      	mov	r3, r1
 80005b8:	807b      	strh	r3, [r7, #2]
 80005ba:	4613      	mov	r3, r2
 80005bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80005be:	787b      	ldrb	r3, [r7, #1]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d009      	beq.n	80005d8 <GPIO_WriteBit+0x2a>
  {
	  GPIOx->ODR |= (0x1 << GPIO_Pin) ;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	887a      	ldrh	r2, [r7, #2]
 80005ca:	2101      	movs	r1, #1
 80005cc:	fa01 f202 	lsl.w	r2, r1, r2
 80005d0:	431a      	orrs	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	615a      	str	r2, [r3, #20]
  }
  else
  {
	  GPIOx->ODR &= ~(0x1 << GPIO_Pin);
  }
}
 80005d6:	e009      	b.n	80005ec <GPIO_WriteBit+0x3e>
	  GPIOx->ODR &= ~(0x1 << GPIO_Pin);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	887a      	ldrh	r2, [r7, #2]
 80005de:	2101      	movs	r1, #1
 80005e0:	fa01 f202 	lsl.w	r2, r1, r2
 80005e4:	43d2      	mvns	r2, r2
 80005e6:	401a      	ands	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	615a      	str	r2, [r3, #20]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8000604:	887a      	ldrh	r2, [r7, #2]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	615a      	str	r2, [r3, #20]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
	...

08000618 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <RCC_DeInit+0x60>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <RCC_DeInit+0x60>)
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <RCC_DeInit+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <RCC_DeInit+0x60>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a11      	ldr	r2, [pc, #68]	; (8000678 <RCC_DeInit+0x60>)
 8000634:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000638:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800063c:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <RCC_DeInit+0x60>)
 8000640:	4a0e      	ldr	r2, [pc, #56]	; (800067c <RCC_DeInit+0x64>)
 8000642:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <RCC_DeInit+0x60>)
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <RCC_DeInit+0x68>)
 8000648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <RCC_DeInit+0x60>)
 800064e:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <RCC_DeInit+0x6c>)
 8000650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <RCC_DeInit+0x60>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <RCC_DeInit+0x60>)
 800065a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800065e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <RCC_DeInit+0x60>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8000666:	4b04      	ldr	r3, [pc, #16]	; (8000678 <RCC_DeInit+0x60>)
 8000668:	2200      	movs	r2, #0
 800066a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40023800 	.word	0x40023800
 800067c:	24003010 	.word	0x24003010
 8000680:	20003000 	.word	0x20003000
 8000684:	24003000 	.word	0x24003000

08000688 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000694:	78fb      	ldrb	r3, [r7, #3]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d006      	beq.n	80006a8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800069c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800069e:	4909      	ldr	r1, [pc, #36]	; (80006c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80006a6:	e006      	b.n	80006b6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	43db      	mvns	r3, r3
 80006b0:	4904      	ldr	r1, [pc, #16]	; (80006c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006b2:	4013      	ands	r3, r2
 80006b4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800

080006c8 <main>:

#include "stm32f4xx.h"
#include "LCD.h"

int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
	RCC_DeInit();
 80006ce:	f7ff ffa3 	bl	8000618 <RCC_DeInit>

	SystemCoreClockUpdate();
 80006d2:	f000 f865 	bl	80007a0 <SystemCoreClockUpdate>

	/*Enable clock for the port used: GPIOA */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 80006d6:	2101      	movs	r1, #1
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ffd5 	bl	8000688 <RCC_AHB1PeriphClockCmd>

	LCD_PinConfig_t LCD_PinConfig;
	LCD_PinConfig.GPIO_Port=GPIOA;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <main+0x64>)
 80006e0:	603b      	str	r3, [r7, #0]
	LCD_PinConfig.dataPin[0]=GPIO_PinSource0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	713b      	strb	r3, [r7, #4]
	LCD_PinConfig.dataPin[1]=GPIO_PinSource1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	717b      	strb	r3, [r7, #5]
	LCD_PinConfig.dataPin[2]=GPIO_PinSource2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	71bb      	strb	r3, [r7, #6]
	LCD_PinConfig.dataPin[3]=GPIO_PinSource3;
 80006ee:	2303      	movs	r3, #3
 80006f0:	71fb      	strb	r3, [r7, #7]
	LCD_PinConfig.dataPin[4]=GPIO_PinSource4;
 80006f2:	2304      	movs	r3, #4
 80006f4:	723b      	strb	r3, [r7, #8]
	LCD_PinConfig.dataPin[5]=GPIO_PinSource5;
 80006f6:	2305      	movs	r3, #5
 80006f8:	727b      	strb	r3, [r7, #9]
	LCD_PinConfig.dataPin[6]=GPIO_PinSource6;
 80006fa:	2306      	movs	r3, #6
 80006fc:	72bb      	strb	r3, [r7, #10]
	LCD_PinConfig.dataPin[7]=GPIO_PinSource7;
 80006fe:	2307      	movs	r3, #7
 8000700:	72fb      	strb	r3, [r7, #11]
	LCD_PinConfig.regSelectPin=GPIO_PinSource8;
 8000702:	2308      	movs	r3, #8
 8000704:	737b      	strb	r3, [r7, #13]
	LCD_PinConfig.readWritePin=GPIO_PinSource9;
 8000706:	2309      	movs	r3, #9
 8000708:	73bb      	strb	r3, [r7, #14]
	LCD_PinConfig.enablePin=GPIO_PinSource10;
 800070a:	230a      	movs	r3, #10
 800070c:	733b      	strb	r3, [r7, #12]

	LCD_PinSetup(&LCD_PinConfig);
 800070e:	463b      	mov	r3, r7
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fe5e 	bl	80003d2 <LCD_PinSetup>

	LCD_ScreenSetup(&LCD_PinConfig);
 8000716:	463b      	mov	r3, r7
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fd7b 	bl	8000214 <LCD_ScreenSetup>

	LCD_WriteData(&LCD_PinConfig,"HELLO WORLD");
 800071e:	463b      	mov	r3, r7
 8000720:	4903      	ldr	r1, [pc, #12]	; (8000730 <main+0x68>)
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff fdfc 	bl	8000320 <LCD_WriteData>

	for(;;);
 8000728:	e7fe      	b.n	8000728 <main+0x60>
 800072a:	bf00      	nop
 800072c:	40020000 	.word	0x40020000
 8000730:	08000b2c 	.word	0x08000b2c

08000734 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x60>)
 800073a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073e:	4a15      	ldr	r2, [pc, #84]	; (8000794 <SystemInit+0x60>)
 8000740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <SystemInit+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a12      	ldr	r2, [pc, #72]	; (8000798 <SystemInit+0x64>)
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <SystemInit+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x64>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <SystemInit+0x64>)
 8000760:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000768:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <SystemInit+0x64>)
 800076c:	4a0b      	ldr	r2, [pc, #44]	; (800079c <SystemInit+0x68>)
 800076e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <SystemInit+0x64>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a08      	ldr	r2, [pc, #32]	; (8000798 <SystemInit+0x64>)
 8000776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800077a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <SystemInit+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000782:	f000 f8db 	bl	800093c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000786:	4b03      	ldr	r3, [pc, #12]	; (8000794 <SystemInit+0x60>)
 8000788:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800078c:	609a      	str	r2, [r3, #8]
#endif
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	40023800 	.word	0x40023800
 800079c:	24003010 	.word	0x24003010

080007a0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b087      	sub	sp, #28
 80007a4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	2302      	movs	r3, #2
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	2302      	movs	r3, #2
 80007b8:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	603b      	str	r3, [r7, #0]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80007be:	4b5a      	ldr	r3, [pc, #360]	; (8000928 <SystemCoreClockUpdate+0x188>)
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	f003 030c 	and.w	r3, r3, #12
 80007c6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	2b0c      	cmp	r3, #12
 80007cc:	f200 8092 	bhi.w	80008f4 <SystemCoreClockUpdate+0x154>
 80007d0:	a201      	add	r2, pc, #4	; (adr r2, 80007d8 <SystemCoreClockUpdate+0x38>)
 80007d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d6:	bf00      	nop
 80007d8:	0800080d 	.word	0x0800080d
 80007dc:	080008f5 	.word	0x080008f5
 80007e0:	080008f5 	.word	0x080008f5
 80007e4:	080008f5 	.word	0x080008f5
 80007e8:	08000815 	.word	0x08000815
 80007ec:	080008f5 	.word	0x080008f5
 80007f0:	080008f5 	.word	0x080008f5
 80007f4:	080008f5 	.word	0x080008f5
 80007f8:	0800081d 	.word	0x0800081d
 80007fc:	080008f5 	.word	0x080008f5
 8000800:	080008f5 	.word	0x080008f5
 8000804:	080008f5 	.word	0x080008f5
 8000808:	08000889 	.word	0x08000889
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800080c:	4b47      	ldr	r3, [pc, #284]	; (800092c <SystemCoreClockUpdate+0x18c>)
 800080e:	4a48      	ldr	r2, [pc, #288]	; (8000930 <SystemCoreClockUpdate+0x190>)
 8000810:	601a      	str	r2, [r3, #0]
      break;
 8000812:	e073      	b.n	80008fc <SystemCoreClockUpdate+0x15c>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000814:	4b45      	ldr	r3, [pc, #276]	; (800092c <SystemCoreClockUpdate+0x18c>)
 8000816:	4a47      	ldr	r2, [pc, #284]	; (8000934 <SystemCoreClockUpdate+0x194>)
 8000818:	601a      	str	r2, [r3, #0]
      break;
 800081a:	e06f      	b.n	80008fc <SystemCoreClockUpdate+0x15c>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800081c:	4b42      	ldr	r3, [pc, #264]	; (8000928 <SystemCoreClockUpdate+0x188>)
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	0d9b      	lsrs	r3, r3, #22
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000828:	4b3f      	ldr	r3, [pc, #252]	; (8000928 <SystemCoreClockUpdate+0x188>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000830:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00c      	beq.n	8000852 <SystemCoreClockUpdate+0xb2>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000838:	4a3e      	ldr	r2, [pc, #248]	; (8000934 <SystemCoreClockUpdate+0x194>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000840:	4a39      	ldr	r2, [pc, #228]	; (8000928 <SystemCoreClockUpdate+0x188>)
 8000842:	6852      	ldr	r2, [r2, #4]
 8000844:	0992      	lsrs	r2, r2, #6
 8000846:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800084a:	fb02 f303 	mul.w	r3, r2, r3
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	e00b      	b.n	800086a <SystemCoreClockUpdate+0xca>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000852:	4a37      	ldr	r2, [pc, #220]	; (8000930 <SystemCoreClockUpdate+0x190>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	fbb2 f3f3 	udiv	r3, r2, r3
 800085a:	4a33      	ldr	r2, [pc, #204]	; (8000928 <SystemCoreClockUpdate+0x188>)
 800085c:	6852      	ldr	r2, [r2, #4]
 800085e:	0992      	lsrs	r2, r2, #6
 8000860:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000864:	fb02 f303 	mul.w	r3, r2, r3
 8000868:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800086a:	4b2f      	ldr	r3, [pc, #188]	; (8000928 <SystemCoreClockUpdate+0x188>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	0c1b      	lsrs	r3, r3, #16
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	3301      	adds	r3, #1
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 800087a:	697a      	ldr	r2, [r7, #20]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000882:	4a2a      	ldr	r2, [pc, #168]	; (800092c <SystemCoreClockUpdate+0x18c>)
 8000884:	6013      	str	r3, [r2, #0]
      break;
 8000886:	e039      	b.n	80008fc <SystemCoreClockUpdate+0x15c>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
      case 0x0C:  /* PLL R used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_R
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000888:	4b27      	ldr	r3, [pc, #156]	; (8000928 <SystemCoreClockUpdate+0x188>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	0d9b      	lsrs	r3, r3, #22
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <SystemCoreClockUpdate+0x188>)
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800089c:	607b      	str	r3, [r7, #4]
      if (pllsource != 0)
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d00c      	beq.n	80008be <SystemCoreClockUpdate+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80008a4:	4a23      	ldr	r2, [pc, #140]	; (8000934 <SystemCoreClockUpdate+0x194>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ac:	4a1e      	ldr	r2, [pc, #120]	; (8000928 <SystemCoreClockUpdate+0x188>)
 80008ae:	6852      	ldr	r2, [r2, #4]
 80008b0:	0992      	lsrs	r2, r2, #6
 80008b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80008b6:	fb02 f303 	mul.w	r3, r2, r3
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	e00b      	b.n	80008d6 <SystemCoreClockUpdate+0x136>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <SystemCoreClockUpdate+0x190>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	4a18      	ldr	r2, [pc, #96]	; (8000928 <SystemCoreClockUpdate+0x188>)
 80008c8:	6852      	ldr	r2, [r2, #4]
 80008ca:	0992      	lsrs	r2, r2, #6
 80008cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80008d0:	fb02 f303 	mul.w	r3, r2, r3
 80008d4:	617b      	str	r3, [r7, #20]
      }
 
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <SystemCoreClockUpdate+0x188>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	0f1b      	lsrs	r3, r3, #28
 80008dc:	f003 0307 	and.w	r3, r3, #7
 80008e0:	3301      	adds	r3, #1
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	603b      	str	r3, [r7, #0]
      SystemCoreClock = pllvco/pllr;      
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ee:	4a0f      	ldr	r2, [pc, #60]	; (800092c <SystemCoreClockUpdate+0x18c>)
 80008f0:	6013      	str	r3, [r2, #0]
      break;
 80008f2:	e003      	b.n	80008fc <SystemCoreClockUpdate+0x15c>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <SystemCoreClockUpdate+0x18c>)
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <SystemCoreClockUpdate+0x190>)
 80008f8:	601a      	str	r2, [r3, #0]
      break;
 80008fa:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <SystemCoreClockUpdate+0x188>)
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	091b      	lsrs	r3, r3, #4
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <SystemCoreClockUpdate+0x198>)
 8000908:	5cd3      	ldrb	r3, [r2, r3]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <SystemCoreClockUpdate+0x18c>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	fa22 f303 	lsr.w	r3, r2, r3
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <SystemCoreClockUpdate+0x18c>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	371c      	adds	r7, #28
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	40023800 	.word	0x40023800
 800092c:	20000000 	.word	0x20000000
 8000930:	00f42400 	.word	0x00f42400
 8000934:	007a1200 	.word	0x007a1200
 8000938:	20000004 	.word	0x20000004

0800093c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800094a:	4b43      	ldr	r3, [pc, #268]	; (8000a58 <SetSysClock+0x11c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a42      	ldr	r2, [pc, #264]	; (8000a58 <SetSysClock+0x11c>)
 8000950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000954:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000956:	4b40      	ldr	r3, [pc, #256]	; (8000a58 <SetSysClock+0x11c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3301      	adds	r3, #1
 8000964:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d103      	bne.n	8000974 <SetSysClock+0x38>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000972:	d1f0      	bne.n	8000956 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000974:	4b38      	ldr	r3, [pc, #224]	; (8000a58 <SetSysClock+0x11c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097c:	2b00      	cmp	r3, #0
 800097e:	d002      	beq.n	8000986 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000980:	2301      	movs	r3, #1
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	e001      	b.n	800098a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d15c      	bne.n	8000a4a <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000990:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <SetSysClock+0x11c>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	4a30      	ldr	r2, [pc, #192]	; (8000a58 <SetSysClock+0x11c>)
 8000996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800099c:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <SetSysClock+0x120>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a2e      	ldr	r2, [pc, #184]	; (8000a5c <SetSysClock+0x120>)
 80009a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009a6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80009a8:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <SetSysClock+0x11c>)
 80009aa:	4a2b      	ldr	r2, [pc, #172]	; (8000a58 <SetSysClock+0x11c>)
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <SetSysClock+0x11c>)
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	4a28      	ldr	r2, [pc, #160]	; (8000a58 <SetSysClock+0x11c>)
 80009b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ba:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80009bc:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <SetSysClock+0x11c>)
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	4a25      	ldr	r2, [pc, #148]	; (8000a58 <SetSysClock+0x11c>)
 80009c2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80009c6:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80009c8:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <SetSysClock+0x11c>)
 80009ca:	4a25      	ldr	r2, [pc, #148]	; (8000a60 <SetSysClock+0x124>)
 80009cc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80009ce:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <SetSysClock+0x11c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <SetSysClock+0x11c>)
 80009d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009d8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80009da:	bf00      	nop
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <SetSysClock+0x11c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d0f9      	beq.n	80009dc <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <SetSysClock+0x120>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <SetSysClock+0x120>)
 80009ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009f2:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 80009f4:	bf00      	nop
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <SetSysClock+0x120>)
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f9      	beq.n	80009f6 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <SetSysClock+0x120>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a15      	ldr	r2, [pc, #84]	; (8000a5c <SetSysClock+0x120>)
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0c:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8000a0e:	bf00      	nop
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <SetSysClock+0x120>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0f9      	beq.n	8000a10 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <SetSysClock+0x128>)
 8000a1e:	f240 7205 	movw	r2, #1797	; 0x705
 8000a22:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <SetSysClock+0x11c>)
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <SetSysClock+0x11c>)
 8000a2a:	f023 0303 	bic.w	r3, r3, #3
 8000a2e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <SetSysClock+0x11c>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <SetSysClock+0x11c>)
 8000a36:	f043 0302 	orr.w	r3, r3, #2
 8000a3a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000a3c:	bf00      	nop
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <SetSysClock+0x11c>)
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	f003 030c 	and.w	r3, r3, #12
 8000a46:	2b08      	cmp	r3, #8
 8000a48:	d1f9      	bne.n	8000a3e <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000
 8000a60:	77405a08 	.word	0x77405a08
 8000a64:	40023c00 	.word	0x40023c00

08000a68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a6c:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6e:	490e      	ldr	r1, [pc, #56]	; (8000aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a70:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <LoopForever+0xe>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a84:	4c0b      	ldr	r4, [pc, #44]	; (8000ab4 <LoopForever+0x16>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a92:	f7ff fe4f 	bl	8000734 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a96:	f000 f811 	bl	8000abc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a9a:	f7ff fe15 	bl	80006c8 <main>

08000a9e <LoopForever>:

LoopForever:
    b LoopForever
 8000a9e:	e7fe      	b.n	8000a9e <LoopForever>
  ldr   r0, =_estack
 8000aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000aac:	08000b40 	.word	0x08000b40
  ldr r2, =_sbss
 8000ab0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ab4:	20000030 	.word	0x20000030

08000ab8 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC_IRQHandler>
	...

08000abc <__libc_init_array>:
 8000abc:	b570      	push	{r4, r5, r6, lr}
 8000abe:	4e0d      	ldr	r6, [pc, #52]	; (8000af4 <__libc_init_array+0x38>)
 8000ac0:	4c0d      	ldr	r4, [pc, #52]	; (8000af8 <__libc_init_array+0x3c>)
 8000ac2:	1ba4      	subs	r4, r4, r6
 8000ac4:	10a4      	asrs	r4, r4, #2
 8000ac6:	2500      	movs	r5, #0
 8000ac8:	42a5      	cmp	r5, r4
 8000aca:	d109      	bne.n	8000ae0 <__libc_init_array+0x24>
 8000acc:	4e0b      	ldr	r6, [pc, #44]	; (8000afc <__libc_init_array+0x40>)
 8000ace:	4c0c      	ldr	r4, [pc, #48]	; (8000b00 <__libc_init_array+0x44>)
 8000ad0:	f000 f820 	bl	8000b14 <_init>
 8000ad4:	1ba4      	subs	r4, r4, r6
 8000ad6:	10a4      	asrs	r4, r4, #2
 8000ad8:	2500      	movs	r5, #0
 8000ada:	42a5      	cmp	r5, r4
 8000adc:	d105      	bne.n	8000aea <__libc_init_array+0x2e>
 8000ade:	bd70      	pop	{r4, r5, r6, pc}
 8000ae0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ae4:	4798      	blx	r3
 8000ae6:	3501      	adds	r5, #1
 8000ae8:	e7ee      	b.n	8000ac8 <__libc_init_array+0xc>
 8000aea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000aee:	4798      	blx	r3
 8000af0:	3501      	adds	r5, #1
 8000af2:	e7f2      	b.n	8000ada <__libc_init_array+0x1e>
 8000af4:	08000b38 	.word	0x08000b38
 8000af8:	08000b38 	.word	0x08000b38
 8000afc:	08000b38 	.word	0x08000b38
 8000b00:	08000b3c 	.word	0x08000b3c

08000b04 <memset>:
 8000b04:	4402      	add	r2, r0
 8000b06:	4603      	mov	r3, r0
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d100      	bne.n	8000b0e <memset+0xa>
 8000b0c:	4770      	bx	lr
 8000b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8000b12:	e7f9      	b.n	8000b08 <memset+0x4>

08000b14 <_init>:
 8000b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b16:	bf00      	nop
 8000b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b1a:	bc08      	pop	{r3}
 8000b1c:	469e      	mov	lr, r3
 8000b1e:	4770      	bx	lr

08000b20 <_fini>:
 8000b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b22:	bf00      	nop
 8000b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b26:	bc08      	pop	{r3}
 8000b28:	469e      	mov	lr, r3
 8000b2a:	4770      	bx	lr

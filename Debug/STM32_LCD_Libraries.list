
STM32_LCD_Libraries.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000928  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000aec  08000aec  00010aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b14  08000b14  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08000b14  08000b14  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b14  08000b14  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b14  08000b14  00010b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b18  08000b18  00010b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000014  08000b30  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000030  08000b30  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002b94  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000846  00000000  00000000  00022bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000358  00000000  00000000  00023420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000300  00000000  00000000  00023778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000121a2  00000000  00000000  00023a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000315c  00000000  00000000  00035c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007127b  00000000  00000000  00038d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a9ff1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ddc  00000000  00000000  000aa06c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000ad4 	.word	0x08000ad4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08000ad4 	.word	0x08000ad4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <delay>:
#include <string.h>
#include "LCD.h"

static void delay()
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
	for(int i=0;i<5000;i++);
 800021a:	2300      	movs	r3, #0
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	e002      	b.n	8000226 <delay+0x12>
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3301      	adds	r3, #1
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f241 3287 	movw	r2, #4999	; 0x1387
 800022c:	4293      	cmp	r3, r2
 800022e:	ddf7      	ble.n	8000220 <delay+0xc>
}
 8000230:	bf00      	nop
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr

0800023c <LCD_Line2>:
{
	LCD_command(LCD_Pinconfig,0x01);
}

void LCD_Line2(LCD_PinConfig_t* LCD_Pinconfig)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	LCD_command(LCD_Pinconfig,0xC0);
 8000244:	21c0      	movs	r1, #192	; 0xc0
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f000 f804 	bl	8000254 <LCD_command>
}
 800024c:	bf00      	nop
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}

08000254 <LCD_command>:
}



void LCD_command(LCD_PinConfig_t* LCD_Pinconfig,uint16_t hex_command)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
 800025c:	460b      	mov	r3, r1
 800025e:	807b      	strh	r3, [r7, #2]
	/*Send Command 01H to clear display */
	GPIO_Write(LCD_Pinconfig->GPIO_Port,((uint16_t)(0x00) << 4));
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f000 f998 	bl	800059c <GPIO_Write>
	GPIO_Write(LCD_Pinconfig->GPIO_Port,((uint16_t)(hex_command) << 4));
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	887b      	ldrh	r3, [r7, #2]
 8000272:	011b      	lsls	r3, r3, #4
 8000274:	b29b      	uxth	r3, r3
 8000276:	4619      	mov	r1, r3
 8000278:	4610      	mov	r0, r2
 800027a:	f000 f98f 	bl	800059c <GPIO_Write>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->readWritePin,Bit_RESET); //Select write
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	6818      	ldr	r0, [r3, #0]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	8b1b      	ldrh	r3, [r3, #24]
 8000286:	2200      	movs	r2, #0
 8000288:	4619      	mov	r1, r3
 800028a:	f000 f96f 	bl	800056c <GPIO_WriteBit>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->regSelectPin,Bit_RESET);  // set Command Register
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	6818      	ldr	r0, [r3, #0]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	8adb      	ldrh	r3, [r3, #22]
 8000296:	2200      	movs	r2, #0
 8000298:	4619      	mov	r1, r3
 800029a:	f000 f967 	bl	800056c <GPIO_WriteBit>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->enablePin,Bit_SET);   //Set and reset  enable pin to send data
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	6818      	ldr	r0, [r3, #0]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	8a9b      	ldrh	r3, [r3, #20]
 80002a6:	2201      	movs	r2, #1
 80002a8:	4619      	mov	r1, r3
 80002aa:	f000 f95f 	bl	800056c <GPIO_WriteBit>
	delay();
 80002ae:	f7ff ffb1 	bl	8000214 <delay>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->enablePin,Bit_RESET);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	6818      	ldr	r0, [r3, #0]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	8a9b      	ldrh	r3, [r3, #20]
 80002ba:	2200      	movs	r2, #0
 80002bc:	4619      	mov	r1, r3
 80002be:	f000 f955 	bl	800056c <GPIO_WriteBit>

}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}

080002ca <LCD_ScreenSetup>:

void LCD_ScreenSetup(LCD_PinConfig_t* LCD_Pinconfig)
{
 80002ca:	b580      	push	{r7, lr}
 80002cc:	b082      	sub	sp, #8
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	6078      	str	r0, [r7, #4]
	/*Send Command 01H to clear display */
	LCD_command(LCD_Pinconfig,0x01);
 80002d2:	2101      	movs	r1, #1
 80002d4:	6878      	ldr	r0, [r7, #4]
 80002d6:	f7ff ffbd 	bl	8000254 <LCD_command>

	/*Send Command 0FH to Display,Cursor ON */
	LCD_command(LCD_Pinconfig,0x0F);
 80002da:	210f      	movs	r1, #15
 80002dc:	6878      	ldr	r0, [r7, #4]
 80002de:	f7ff ffb9 	bl	8000254 <LCD_command>

	/*Send Command 38H to select LCD of two rows */
	LCD_command(LCD_Pinconfig,0x38);
 80002e2:	2138      	movs	r1, #56	; 0x38
 80002e4:	6878      	ldr	r0, [r7, #4]
 80002e6:	f7ff ffb5 	bl	8000254 <LCD_command>



}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <LCD_WriteData>:



void LCD_WriteData(LCD_PinConfig_t* LCD_Pinconfig,char* dataString)
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b084      	sub	sp, #16
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	6078      	str	r0, [r7, #4]
 80002fa:	6039      	str	r1, [r7, #0]

	uint8_t stringLen=strlen(dataString);
 80002fc:	6838      	ldr	r0, [r7, #0]
 80002fe:	f7ff ff81 	bl	8000204 <strlen>
 8000302:	4603      	mov	r3, r0
 8000304:	72fb      	strb	r3, [r7, #11]
	for(int i=0; i< stringLen; i++)
 8000306:	2300      	movs	r3, #0
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	e00b      	b.n	8000324 <LCD_WriteData+0x32>
	{
		LCD_WriteCharacter(LCD_Pinconfig,(char)(*dataString));
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	4619      	mov	r1, r3
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f000 f80e 	bl	8000334 <LCD_WriteCharacter>
		dataString++;
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	3301      	adds	r3, #1
 800031c:	603b      	str	r3, [r7, #0]
	for(int i=0; i< stringLen; i++)
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	3301      	adds	r3, #1
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	7afb      	ldrb	r3, [r7, #11]
 8000326:	68fa      	ldr	r2, [r7, #12]
 8000328:	429a      	cmp	r2, r3
 800032a:	dbef      	blt.n	800030c <LCD_WriteData+0x1a>
	}


}
 800032c:	bf00      	nop
 800032e:	3710      	adds	r7, #16
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <LCD_WriteCharacter>:


void LCD_WriteCharacter(LCD_PinConfig_t* LCD_Pinconfig,char dataCharacter)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	70fb      	strb	r3, [r7, #3]
		uint8_t dataOut;
	dataOut= (uint16_t)dataCharacter;
 8000340:	78fb      	ldrb	r3, [r7, #3]
 8000342:	73fb      	strb	r3, [r7, #15]

	/*Send data to LCD*/
	GPIO_Write(LCD_Pinconfig->GPIO_Port,((uint16_t)(0x00) << 4));
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f000 f926 	bl	800059c <GPIO_Write>
	GPIO_Write(LCD_Pinconfig->GPIO_Port,((uint16_t)dataOut << 4));
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	7bfb      	ldrb	r3, [r7, #15]
 8000356:	b29b      	uxth	r3, r3
 8000358:	011b      	lsls	r3, r3, #4
 800035a:	b29b      	uxth	r3, r3
 800035c:	4619      	mov	r1, r3
 800035e:	4610      	mov	r0, r2
 8000360:	f000 f91c 	bl	800059c <GPIO_Write>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->readWritePin,Bit_RESET); //Select write
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	6818      	ldr	r0, [r3, #0]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	8b1b      	ldrh	r3, [r3, #24]
 800036c:	2200      	movs	r2, #0
 800036e:	4619      	mov	r1, r3
 8000370:	f000 f8fc 	bl	800056c <GPIO_WriteBit>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->regSelectPin,Bit_SET);  // set Data Register
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	6818      	ldr	r0, [r3, #0]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	8adb      	ldrh	r3, [r3, #22]
 800037c:	2201      	movs	r2, #1
 800037e:	4619      	mov	r1, r3
 8000380:	f000 f8f4 	bl	800056c <GPIO_WriteBit>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->enablePin,Bit_SET);   //Set and reset  enable pin to send data
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	6818      	ldr	r0, [r3, #0]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	8a9b      	ldrh	r3, [r3, #20]
 800038c:	2201      	movs	r2, #1
 800038e:	4619      	mov	r1, r3
 8000390:	f000 f8ec 	bl	800056c <GPIO_WriteBit>
	delay();
 8000394:	f7ff ff3e 	bl	8000214 <delay>
	GPIO_WriteBit(LCD_Pinconfig->GPIO_Port,LCD_Pinconfig->enablePin,Bit_RESET);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	6818      	ldr	r0, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	8a9b      	ldrh	r3, [r3, #20]
 80003a0:	2200      	movs	r2, #0
 80003a2:	4619      	mov	r1, r3
 80003a4:	f000 f8e2 	bl	800056c <GPIO_WriteBit>
}
 80003a8:	bf00      	nop
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <LCD_PinSetup>:


/*LCD PinSetup */

void LCD_PinSetup(LCD_PinConfig_t* LCD_PinConfig)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]


/* Setup Data Pins */
		GPIO_InitTypeDef LCD_GPIO;
		memset(&LCD_GPIO,0,sizeof(LCD_GPIO));
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	2208      	movs	r2, #8
 80003be:	2100      	movs	r1, #0
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 fb7f 	bl	8000ac4 <memset>


		for(int i = 0; i< 8; i++)
 80003c6:	2300      	movs	r3, #0
 80003c8:	61fb      	str	r3, [r7, #28]
 80003ca:	e018      	b.n	80003fe <LCD_PinSetup+0x4e>
		{
			LCD_GPIO.GPIO_Mode=GPIO_Mode_OUT;
 80003cc:	2301      	movs	r3, #1
 80003ce:	763b      	strb	r3, [r7, #24]
			LCD_GPIO.GPIO_OType=GPIO_OType_PP;
 80003d0:	2300      	movs	r3, #0
 80003d2:	76bb      	strb	r3, [r7, #26]
			LCD_GPIO.GPIO_Pin=LCD_PinConfig->dataPin[i];
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	69fb      	ldr	r3, [r7, #28]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4413      	add	r3, r2
 80003dc:	889b      	ldrh	r3, [r3, #4]
 80003de:	617b      	str	r3, [r7, #20]
			LCD_GPIO.GPIO_PuPd=GPIO_PuPd_DOWN;
 80003e0:	2302      	movs	r3, #2
 80003e2:	76fb      	strb	r3, [r7, #27]
			LCD_GPIO.GPIO_Speed=GPIO_Low_Speed;
 80003e4:	2300      	movs	r3, #0
 80003e6:	767b      	strb	r3, [r7, #25]

			GPIO_Init(LCD_PinConfig->GPIO_Port,&LCD_GPIO);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f107 0214 	add.w	r2, r7, #20
 80003f0:	4611      	mov	r1, r2
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 f82c 	bl	8000450 <GPIO_Init>
		for(int i = 0; i< 8; i++)
 80003f8:	69fb      	ldr	r3, [r7, #28]
 80003fa:	3301      	adds	r3, #1
 80003fc:	61fb      	str	r3, [r7, #28]
 80003fe:	69fb      	ldr	r3, [r7, #28]
 8000400:	2b07      	cmp	r3, #7
 8000402:	dde3      	ble.n	80003cc <LCD_PinSetup+0x1c>

/* Setup control Pins */

		GPIO_InitTypeDef LCD_GPIO2;

		memset(&LCD_GPIO2,0,sizeof(LCD_GPIO2));
 8000404:	f107 030c 	add.w	r3, r7, #12
 8000408:	2208      	movs	r2, #8
 800040a:	2100      	movs	r1, #0
 800040c:	4618      	mov	r0, r3
 800040e:	f000 fb59 	bl	8000ac4 <memset>
		LCD_GPIO2.GPIO_Mode=GPIO_Mode_OUT;
 8000412:	2301      	movs	r3, #1
 8000414:	743b      	strb	r3, [r7, #16]
		LCD_GPIO2.GPIO_OType=GPIO_OType_PP;
 8000416:	2300      	movs	r3, #0
 8000418:	74bb      	strb	r3, [r7, #18]
		LCD_GPIO2.GPIO_Pin=LCD_PinConfig->enablePin|LCD_PinConfig->readWritePin|LCD_PinConfig->regSelectPin;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	8a9a      	ldrh	r2, [r3, #20]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	8b1b      	ldrh	r3, [r3, #24]
 8000422:	4313      	orrs	r3, r2
 8000424:	b29a      	uxth	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	8adb      	ldrh	r3, [r3, #22]
 800042a:	4313      	orrs	r3, r2
 800042c:	b29b      	uxth	r3, r3
 800042e:	60fb      	str	r3, [r7, #12]
		LCD_GPIO2.GPIO_PuPd=GPIO_PuPd_DOWN;
 8000430:	2302      	movs	r3, #2
 8000432:	74fb      	strb	r3, [r7, #19]
		LCD_GPIO2.GPIO_Speed=GPIO_Low_Speed;
 8000434:	2300      	movs	r3, #0
 8000436:	747b      	strb	r3, [r7, #17]

		GPIO_Init(LCD_PinConfig->GPIO_Port,&LCD_GPIO2);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f107 020c 	add.w	r2, r7, #12
 8000440:	4611      	mov	r1, r2
 8000442:	4618      	mov	r0, r3
 8000444:	f000 f804 	bl	8000450 <GPIO_Init>

}
 8000448:	bf00      	nop
 800044a:	3720      	adds	r7, #32
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000450:	b480      	push	{r7}
 8000452:	b087      	sub	sp, #28
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
 800045e:	2300      	movs	r3, #0
 8000460:	613b      	str	r3, [r7, #16]
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000466:	2300      	movs	r3, #0
 8000468:	617b      	str	r3, [r7, #20]
 800046a:	e076      	b.n	800055a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800046c:	2201      	movs	r2, #1
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	fa02 f303 	lsl.w	r3, r2, r3
 8000474:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	693a      	ldr	r2, [r7, #16]
 800047c:	4013      	ands	r3, r2
 800047e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000480:	68fa      	ldr	r2, [r7, #12]
 8000482:	693b      	ldr	r3, [r7, #16]
 8000484:	429a      	cmp	r2, r3
 8000486:	d165      	bne.n	8000554 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	2103      	movs	r1, #3
 8000492:	fa01 f303 	lsl.w	r3, r1, r3
 8000496:	43db      	mvns	r3, r3
 8000498:	401a      	ands	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	791b      	ldrb	r3, [r3, #4]
 80004a6:	4619      	mov	r1, r3
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	fa01 f303 	lsl.w	r3, r1, r3
 80004b0:	431a      	orrs	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	791b      	ldrb	r3, [r3, #4]
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d003      	beq.n	80004c6 <GPIO_Init+0x76>
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	791b      	ldrb	r3, [r3, #4]
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	d12e      	bne.n	8000524 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	689a      	ldr	r2, [r3, #8]
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	2103      	movs	r1, #3
 80004d0:	fa01 f303 	lsl.w	r3, r1, r3
 80004d4:	43db      	mvns	r3, r3
 80004d6:	401a      	ands	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	689a      	ldr	r2, [r3, #8]
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	795b      	ldrb	r3, [r3, #5]
 80004e4:	4619      	mov	r1, r3
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	fa01 f303 	lsl.w	r3, r1, r3
 80004ee:	431a      	orrs	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	685a      	ldr	r2, [r3, #4]
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	b29b      	uxth	r3, r3
 80004fc:	4619      	mov	r1, r3
 80004fe:	2301      	movs	r3, #1
 8000500:	408b      	lsls	r3, r1
 8000502:	43db      	mvns	r3, r3
 8000504:	401a      	ands	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	683a      	ldr	r2, [r7, #0]
 8000510:	7992      	ldrb	r2, [r2, #6]
 8000512:	4611      	mov	r1, r2
 8000514:	697a      	ldr	r2, [r7, #20]
 8000516:	b292      	uxth	r2, r2
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	b292      	uxth	r2, r2
 800051e:	431a      	orrs	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	68da      	ldr	r2, [r3, #12]
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	b29b      	uxth	r3, r3
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	2103      	movs	r1, #3
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	43db      	mvns	r3, r3
 8000536:	401a      	ands	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	68da      	ldr	r2, [r3, #12]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	79db      	ldrb	r3, [r3, #7]
 8000544:	4619      	mov	r1, r3
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	431a      	orrs	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	3301      	adds	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d985      	bls.n	800046c <GPIO_Init+0x1c>
    }
  }
}
 8000560:	bf00      	nop
 8000562:	371c      	adds	r7, #28
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	807b      	strh	r3, [r7, #2]
 8000578:	4613      	mov	r3, r2
 800057a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800057c:	787b      	ldrb	r3, [r7, #1]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d003      	beq.n	800058a <GPIO_WriteBit+0x1e>
    {
      GPIOx->BSRRL = GPIO_Pin;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	887a      	ldrh	r2, [r7, #2]
 8000586:	831a      	strh	r2, [r3, #24]
    }
    else
    {
      GPIOx->BSRRH = GPIO_Pin ;
    }
}
 8000588:	e002      	b.n	8000590 <GPIO_WriteBit+0x24>
      GPIOx->BSRRH = GPIO_Pin ;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	887a      	ldrh	r2, [r7, #2]
 800058e:	835a      	strh	r2, [r3, #26]
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80005a8:	887a      	ldrh	r2, [r7, #2]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	615a      	str	r2, [r3, #20]
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
	...

080005bc <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <RCC_DeInit+0x60>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a15      	ldr	r2, [pc, #84]	; (800061c <RCC_DeInit+0x60>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <RCC_DeInit+0x60>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <RCC_DeInit+0x60>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a11      	ldr	r2, [pc, #68]	; (800061c <RCC_DeInit+0x60>)
 80005d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80005dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80005e0:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <RCC_DeInit+0x60>)
 80005e4:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <RCC_DeInit+0x64>)
 80005e6:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <RCC_DeInit+0x60>)
 80005ea:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <RCC_DeInit+0x68>)
 80005ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <RCC_DeInit+0x60>)
 80005f2:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <RCC_DeInit+0x6c>)
 80005f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <RCC_DeInit+0x60>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a07      	ldr	r2, [pc, #28]	; (800061c <RCC_DeInit+0x60>)
 80005fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000602:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <RCC_DeInit+0x60>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 800060a:	4b04      	ldr	r3, [pc, #16]	; (800061c <RCC_DeInit+0x60>)
 800060c:	2200      	movs	r2, #0
 800060e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	40023800 	.word	0x40023800
 8000620:	24003010 	.word	0x24003010
 8000624:	20003000 	.word	0x20003000
 8000628:	24003000 	.word	0x24003000

0800062c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d006      	beq.n	800064c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000642:	4909      	ldr	r1, [pc, #36]	; (8000668 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4313      	orrs	r3, r2
 8000648:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800064a:	e006      	b.n	800065a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <RCC_AHB1PeriphClockCmd+0x3c>)
 800064e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	43db      	mvns	r3, r3
 8000654:	4904      	ldr	r1, [pc, #16]	; (8000668 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000656:	4013      	ands	r3, r2
 8000658:	630b      	str	r3, [r1, #48]	; 0x30
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <main>:
	for(int i=0;i<n;i++);
}


int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
	RCC_DeInit();
 8000672:	f7ff ffa3 	bl	80005bc <RCC_DeInit>

	SystemCoreClockUpdate();
 8000676:	f000 f873 	bl	8000760 <SystemCoreClockUpdate>

	/*Enable clock for the port used: GPIOA */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 800067a:	2101      	movs	r1, #1
 800067c:	2001      	movs	r0, #1
 800067e:	f7ff ffd5 	bl	800062c <RCC_AHB1PeriphClockCmd>

	LCD_PinConfig_t LCD_PinConfig;
	LCD_PinConfig.GPIO_Port=GPIOA;
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <main+0x7c>)
 8000684:	607b      	str	r3, [r7, #4]
	LCD_PinConfig.dataPin[0]=GPIO_Pin_4;
 8000686:	2310      	movs	r3, #16
 8000688:	813b      	strh	r3, [r7, #8]
	LCD_PinConfig.dataPin[1]=GPIO_Pin_5;
 800068a:	2320      	movs	r3, #32
 800068c:	817b      	strh	r3, [r7, #10]
	LCD_PinConfig.dataPin[2]=GPIO_Pin_6;
 800068e:	2340      	movs	r3, #64	; 0x40
 8000690:	81bb      	strh	r3, [r7, #12]
	LCD_PinConfig.dataPin[3]=GPIO_Pin_7;
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	81fb      	strh	r3, [r7, #14]
	LCD_PinConfig.dataPin[4]=GPIO_Pin_8;
 8000696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069a:	823b      	strh	r3, [r7, #16]
	LCD_PinConfig.dataPin[5]=GPIO_Pin_9;
 800069c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006a0:	827b      	strh	r3, [r7, #18]
	LCD_PinConfig.dataPin[6]=GPIO_Pin_10;
 80006a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a6:	82bb      	strh	r3, [r7, #20]
	LCD_PinConfig.dataPin[7]=GPIO_Pin_11;
 80006a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006ac:	82fb      	strh	r3, [r7, #22]
	LCD_PinConfig.regSelectPin=GPIO_Pin_12;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	837b      	strh	r3, [r7, #26]
	//LCD_PinConfig.readWritePin=GPIO_Pin_9;
	LCD_PinConfig.enablePin=GPIO_Pin_15;
 80006b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006b8:	833b      	strh	r3, [r7, #24]

	LCD_PinSetup(&LCD_PinConfig);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fe77 	bl	80003b0 <LCD_PinSetup>

	LCD_ScreenSetup(&LCD_PinConfig);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fe00 	bl	80002ca <LCD_ScreenSetup>

	LCD_WriteData(&LCD_PinConfig," HELLO WORLD L1 ");
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4907      	ldr	r1, [pc, #28]	; (80006ec <main+0x80>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fe0f 	bl	80002f2 <LCD_WriteData>

	LCD_Line2(&LCD_PinConfig);
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fdb0 	bl	800023c <LCD_Line2>

	LCD_WriteData(&LCD_PinConfig," HELLO WORLD L2 ");
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	4904      	ldr	r1, [pc, #16]	; (80006f0 <main+0x84>)
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fe06 	bl	80002f2 <LCD_WriteData>

	for(;;);
 80006e6:	e7fe      	b.n	80006e6 <main+0x7a>
 80006e8:	40020000 	.word	0x40020000
 80006ec:	08000aec 	.word	0x08000aec
 80006f0:	08000b00 	.word	0x08000b00

080006f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f8:	4b16      	ldr	r3, [pc, #88]	; (8000754 <SystemInit+0x60>)
 80006fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <SystemInit+0x60>)
 8000700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <SystemInit+0x64>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a12      	ldr	r2, [pc, #72]	; (8000758 <SystemInit+0x64>)
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <SystemInit+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <SystemInit+0x64>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <SystemInit+0x64>)
 8000720:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000728:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <SystemInit+0x64>)
 800072c:	4a0b      	ldr	r2, [pc, #44]	; (800075c <SystemInit+0x68>)
 800072e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <SystemInit+0x64>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a08      	ldr	r2, [pc, #32]	; (8000758 <SystemInit+0x64>)
 8000736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <SystemInit+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000742:	f000 f8db 	bl	80008fc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000746:	4b03      	ldr	r3, [pc, #12]	; (8000754 <SystemInit+0x60>)
 8000748:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800074c:	609a      	str	r2, [r3, #8]
#endif
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	40023800 	.word	0x40023800
 800075c:	24003010 	.word	0x24003010

08000760 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b087      	sub	sp, #28
 8000764:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	2302      	movs	r3, #2
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	2302      	movs	r3, #2
 8000778:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	603b      	str	r3, [r7, #0]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800077e:	4b5a      	ldr	r3, [pc, #360]	; (80008e8 <SystemCoreClockUpdate+0x188>)
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	f003 030c 	and.w	r3, r3, #12
 8000786:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	2b0c      	cmp	r3, #12
 800078c:	f200 8092 	bhi.w	80008b4 <SystemCoreClockUpdate+0x154>
 8000790:	a201      	add	r2, pc, #4	; (adr r2, 8000798 <SystemCoreClockUpdate+0x38>)
 8000792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000796:	bf00      	nop
 8000798:	080007cd 	.word	0x080007cd
 800079c:	080008b5 	.word	0x080008b5
 80007a0:	080008b5 	.word	0x080008b5
 80007a4:	080008b5 	.word	0x080008b5
 80007a8:	080007d5 	.word	0x080007d5
 80007ac:	080008b5 	.word	0x080008b5
 80007b0:	080008b5 	.word	0x080008b5
 80007b4:	080008b5 	.word	0x080008b5
 80007b8:	080007dd 	.word	0x080007dd
 80007bc:	080008b5 	.word	0x080008b5
 80007c0:	080008b5 	.word	0x080008b5
 80007c4:	080008b5 	.word	0x080008b5
 80007c8:	08000849 	.word	0x08000849
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80007cc:	4b47      	ldr	r3, [pc, #284]	; (80008ec <SystemCoreClockUpdate+0x18c>)
 80007ce:	4a48      	ldr	r2, [pc, #288]	; (80008f0 <SystemCoreClockUpdate+0x190>)
 80007d0:	601a      	str	r2, [r3, #0]
      break;
 80007d2:	e073      	b.n	80008bc <SystemCoreClockUpdate+0x15c>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80007d4:	4b45      	ldr	r3, [pc, #276]	; (80008ec <SystemCoreClockUpdate+0x18c>)
 80007d6:	4a47      	ldr	r2, [pc, #284]	; (80008f4 <SystemCoreClockUpdate+0x194>)
 80007d8:	601a      	str	r2, [r3, #0]
      break;
 80007da:	e06f      	b.n	80008bc <SystemCoreClockUpdate+0x15c>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80007dc:	4b42      	ldr	r3, [pc, #264]	; (80008e8 <SystemCoreClockUpdate+0x188>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	0d9b      	lsrs	r3, r3, #22
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80007e8:	4b3f      	ldr	r3, [pc, #252]	; (80008e8 <SystemCoreClockUpdate+0x188>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007f0:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d00c      	beq.n	8000812 <SystemCoreClockUpdate+0xb2>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80007f8:	4a3e      	ldr	r2, [pc, #248]	; (80008f4 <SystemCoreClockUpdate+0x194>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000800:	4a39      	ldr	r2, [pc, #228]	; (80008e8 <SystemCoreClockUpdate+0x188>)
 8000802:	6852      	ldr	r2, [r2, #4]
 8000804:	0992      	lsrs	r2, r2, #6
 8000806:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800080a:	fb02 f303 	mul.w	r3, r2, r3
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	e00b      	b.n	800082a <SystemCoreClockUpdate+0xca>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000812:	4a37      	ldr	r2, [pc, #220]	; (80008f0 <SystemCoreClockUpdate+0x190>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	fbb2 f3f3 	udiv	r3, r2, r3
 800081a:	4a33      	ldr	r2, [pc, #204]	; (80008e8 <SystemCoreClockUpdate+0x188>)
 800081c:	6852      	ldr	r2, [r2, #4]
 800081e:	0992      	lsrs	r2, r2, #6
 8000820:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000824:	fb02 f303 	mul.w	r3, r2, r3
 8000828:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800082a:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <SystemCoreClockUpdate+0x188>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	0c1b      	lsrs	r3, r3, #16
 8000830:	f003 0303 	and.w	r3, r3, #3
 8000834:	3301      	adds	r3, #1
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 800083a:	697a      	ldr	r2, [r7, #20]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000842:	4a2a      	ldr	r2, [pc, #168]	; (80008ec <SystemCoreClockUpdate+0x18c>)
 8000844:	6013      	str	r3, [r2, #0]
      break;
 8000846:	e039      	b.n	80008bc <SystemCoreClockUpdate+0x15c>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
      case 0x0C:  /* PLL R used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_R
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000848:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <SystemCoreClockUpdate+0x188>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	0d9b      	lsrs	r3, r3, #22
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000854:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <SystemCoreClockUpdate+0x188>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800085c:	607b      	str	r3, [r7, #4]
      if (pllsource != 0)
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d00c      	beq.n	800087e <SystemCoreClockUpdate+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000864:	4a23      	ldr	r2, [pc, #140]	; (80008f4 <SystemCoreClockUpdate+0x194>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	fbb2 f3f3 	udiv	r3, r2, r3
 800086c:	4a1e      	ldr	r2, [pc, #120]	; (80008e8 <SystemCoreClockUpdate+0x188>)
 800086e:	6852      	ldr	r2, [r2, #4]
 8000870:	0992      	lsrs	r2, r2, #6
 8000872:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000876:	fb02 f303 	mul.w	r3, r2, r3
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	e00b      	b.n	8000896 <SystemCoreClockUpdate+0x136>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800087e:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <SystemCoreClockUpdate+0x190>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	fbb2 f3f3 	udiv	r3, r2, r3
 8000886:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <SystemCoreClockUpdate+0x188>)
 8000888:	6852      	ldr	r2, [r2, #4]
 800088a:	0992      	lsrs	r2, r2, #6
 800088c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000890:	fb02 f303 	mul.w	r3, r2, r3
 8000894:	617b      	str	r3, [r7, #20]
      }
 
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <SystemCoreClockUpdate+0x188>)
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	0f1b      	lsrs	r3, r3, #28
 800089c:	f003 0307 	and.w	r3, r3, #7
 80008a0:	3301      	adds	r3, #1
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	603b      	str	r3, [r7, #0]
      SystemCoreClock = pllvco/pllr;      
 80008a6:	697a      	ldr	r2, [r7, #20]
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <SystemCoreClockUpdate+0x18c>)
 80008b0:	6013      	str	r3, [r2, #0]
      break;
 80008b2:	e003      	b.n	80008bc <SystemCoreClockUpdate+0x15c>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <SystemCoreClockUpdate+0x18c>)
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <SystemCoreClockUpdate+0x190>)
 80008b8:	601a      	str	r2, [r3, #0]
      break;
 80008ba:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <SystemCoreClockUpdate+0x188>)
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	091b      	lsrs	r3, r3, #4
 80008c2:	f003 030f 	and.w	r3, r3, #15
 80008c6:	4a0c      	ldr	r2, [pc, #48]	; (80008f8 <SystemCoreClockUpdate+0x198>)
 80008c8:	5cd3      	ldrb	r3, [r2, r3]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <SystemCoreClockUpdate+0x18c>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	fa22 f303 	lsr.w	r3, r2, r3
 80008d8:	4a04      	ldr	r2, [pc, #16]	; (80008ec <SystemCoreClockUpdate+0x18c>)
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	371c      	adds	r7, #28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40023800 	.word	0x40023800
 80008ec:	20000000 	.word	0x20000000
 80008f0:	00f42400 	.word	0x00f42400
 80008f4:	007a1200 	.word	0x007a1200
 80008f8:	20000004 	.word	0x20000004

080008fc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800090a:	4b43      	ldr	r3, [pc, #268]	; (8000a18 <SetSysClock+0x11c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a42      	ldr	r2, [pc, #264]	; (8000a18 <SetSysClock+0x11c>)
 8000910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000914:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000916:	4b40      	ldr	r3, [pc, #256]	; (8000a18 <SetSysClock+0x11c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d103      	bne.n	8000934 <SetSysClock+0x38>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000932:	d1f0      	bne.n	8000916 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000934:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <SetSysClock+0x11c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093c:	2b00      	cmp	r3, #0
 800093e:	d002      	beq.n	8000946 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000940:	2301      	movs	r3, #1
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	e001      	b.n	800094a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d15c      	bne.n	8000a0a <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000950:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <SetSysClock+0x11c>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a30      	ldr	r2, [pc, #192]	; (8000a18 <SetSysClock+0x11c>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800095c:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <SetSysClock+0x120>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a2e      	ldr	r2, [pc, #184]	; (8000a1c <SetSysClock+0x120>)
 8000962:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000966:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000968:	4b2b      	ldr	r3, [pc, #172]	; (8000a18 <SetSysClock+0x11c>)
 800096a:	4a2b      	ldr	r2, [pc, #172]	; (8000a18 <SetSysClock+0x11c>)
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000970:	4b29      	ldr	r3, [pc, #164]	; (8000a18 <SetSysClock+0x11c>)
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	4a28      	ldr	r2, [pc, #160]	; (8000a18 <SetSysClock+0x11c>)
 8000976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800097a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800097c:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <SetSysClock+0x11c>)
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	4a25      	ldr	r2, [pc, #148]	; (8000a18 <SetSysClock+0x11c>)
 8000982:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000986:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <SetSysClock+0x11c>)
 800098a:	4a25      	ldr	r2, [pc, #148]	; (8000a20 <SetSysClock+0x124>)
 800098c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800098e:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <SetSysClock+0x11c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <SetSysClock+0x11c>)
 8000994:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000998:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800099a:	bf00      	nop
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <SetSysClock+0x11c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d0f9      	beq.n	800099c <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 80009a8:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <SetSysClock+0x120>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a1b      	ldr	r2, [pc, #108]	; (8000a1c <SetSysClock+0x120>)
 80009ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009b2:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 80009b4:	bf00      	nop
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <SetSysClock+0x120>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d0f9      	beq.n	80009b6 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <SetSysClock+0x120>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <SetSysClock+0x120>)
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 80009ce:	bf00      	nop
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <SetSysClock+0x120>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0f9      	beq.n	80009d0 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <SetSysClock+0x128>)
 80009de:	f240 7205 	movw	r2, #1797	; 0x705
 80009e2:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <SetSysClock+0x11c>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <SetSysClock+0x11c>)
 80009ea:	f023 0303 	bic.w	r3, r3, #3
 80009ee:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <SetSysClock+0x11c>)
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <SetSysClock+0x11c>)
 80009f6:	f043 0302 	orr.w	r3, r3, #2
 80009fa:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80009fc:	bf00      	nop
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <SetSysClock+0x11c>)
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	f003 030c 	and.w	r3, r3, #12
 8000a06:	2b08      	cmp	r3, #8
 8000a08:	d1f9      	bne.n	80009fe <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40007000 	.word	0x40007000
 8000a20:	77405a08 	.word	0x77405a08
 8000a24:	40023c00 	.word	0x40023c00

08000a28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a2a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2e:	490e      	ldr	r1, [pc, #56]	; (8000a68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a30:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <LoopForever+0xe>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a44:	4c0b      	ldr	r4, [pc, #44]	; (8000a74 <LoopForever+0x16>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a52:	f7ff fe4f 	bl	80006f4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a56:	f000 f811 	bl	8000a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a5a:	f7ff fe07 	bl	800066c <main>

08000a5e <LoopForever>:

LoopForever:
    b LoopForever
 8000a5e:	e7fe      	b.n	8000a5e <LoopForever>
  ldr   r0, =_estack
 8000a60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a6c:	08000b1c 	.word	0x08000b1c
  ldr r2, =_sbss
 8000a70:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a74:	20000030 	.word	0x20000030

08000a78 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC_IRQHandler>
	...

08000a7c <__libc_init_array>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	4e0d      	ldr	r6, [pc, #52]	; (8000ab4 <__libc_init_array+0x38>)
 8000a80:	4c0d      	ldr	r4, [pc, #52]	; (8000ab8 <__libc_init_array+0x3c>)
 8000a82:	1ba4      	subs	r4, r4, r6
 8000a84:	10a4      	asrs	r4, r4, #2
 8000a86:	2500      	movs	r5, #0
 8000a88:	42a5      	cmp	r5, r4
 8000a8a:	d109      	bne.n	8000aa0 <__libc_init_array+0x24>
 8000a8c:	4e0b      	ldr	r6, [pc, #44]	; (8000abc <__libc_init_array+0x40>)
 8000a8e:	4c0c      	ldr	r4, [pc, #48]	; (8000ac0 <__libc_init_array+0x44>)
 8000a90:	f000 f820 	bl	8000ad4 <_init>
 8000a94:	1ba4      	subs	r4, r4, r6
 8000a96:	10a4      	asrs	r4, r4, #2
 8000a98:	2500      	movs	r5, #0
 8000a9a:	42a5      	cmp	r5, r4
 8000a9c:	d105      	bne.n	8000aaa <__libc_init_array+0x2e>
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000aa4:	4798      	blx	r3
 8000aa6:	3501      	adds	r5, #1
 8000aa8:	e7ee      	b.n	8000a88 <__libc_init_array+0xc>
 8000aaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000aae:	4798      	blx	r3
 8000ab0:	3501      	adds	r5, #1
 8000ab2:	e7f2      	b.n	8000a9a <__libc_init_array+0x1e>
 8000ab4:	08000b14 	.word	0x08000b14
 8000ab8:	08000b14 	.word	0x08000b14
 8000abc:	08000b14 	.word	0x08000b14
 8000ac0:	08000b18 	.word	0x08000b18

08000ac4 <memset>:
 8000ac4:	4402      	add	r2, r0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d100      	bne.n	8000ace <memset+0xa>
 8000acc:	4770      	bx	lr
 8000ace:	f803 1b01 	strb.w	r1, [r3], #1
 8000ad2:	e7f9      	b.n	8000ac8 <memset+0x4>

08000ad4 <_init>:
 8000ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad6:	bf00      	nop
 8000ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ada:	bc08      	pop	{r3}
 8000adc:	469e      	mov	lr, r3
 8000ade:	4770      	bx	lr

08000ae0 <_fini>:
 8000ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae2:	bf00      	nop
 8000ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ae6:	bc08      	pop	{r3}
 8000ae8:	469e      	mov	lr, r3
 8000aea:	4770      	bx	lr
